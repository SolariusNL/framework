// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum ReceiveNotification {
  RECEIVED_DONATION
  SENT_DONATION
  LOGIN
  ADMIN_REPORTS
}

enum PremiumSubscriptionType {
  PREMIUM_ONE_MONTH
  PREMIUM_SIX_MONTHS
  PREMIUM_ONE_YEAR
}

enum GiftCodeGrant {
  PREMIUM_ONE_MONTH
  PREMIUM_SIX_MONTHS
  PREMIUM_ONE_YEAR
  THOUSAND_TICKETS
  TWOTHOUSAND_TICKETS
  FIVETHOUSAND_TICKETS
  SIXTEENTHOUSAND_TICKETS
}

model User {
  id                         Int                   @id @default(autoincrement())
  username                   String
  email                      String
  password                   String
  tickets                    Int                   @default(500)
  premium                    Boolean               @default(false)
  createdAt                  DateTime              @default(now())
  updatedAt                  DateTime              @default(now())
  role                       Role                  @default(USER)
  following                  User[]                @relation("userFollows")
  followers                  User[]                @relation("userFollows")
  sessions                   Session[]             @relation("userSessions")
  games                      Game[]                @relation("gameAuthor")
  avatarUri                  String
  likedGames                 Game[]                @relation("likedGames")
  dislikedGames              Game[]                @relation("dislikedGames")
  nucleusKeys                NucleusKey[]          @relation("nucleusKeys")
  gameComments               GameComment[]         @relation("userGameComments")
  avatar                     Avatar?               @relation("avatar")
  country                    String                @default("")
  snippets                   CodeSnippet[]         @relation("userCodeSnippets")
  bio                        String                @default("This user has not yet written a bio.")
  busy                       Boolean               @default(false)
  banned                     Boolean               @default(false)
  banReason                  String                @default("")
  emailVerificationInstances EmailVerification[]   @relation("emailVerification")
  emailVerified              Boolean               @default(false)
  authTickets                NucleusAuthTicket[]   @relation("authTickets")
  receivedMessages           Message[]             @relation("messageRecipient")
  sentMessages               Message[]             @relation("messageSender")
  reports                    UserReport[]          @relation("userReportAuthor")
  reportedBy                 UserReport[]          @relation("userReportedBy")
  transactions               Transaction[]         @relation("userTransactions")
  notifications              Notification[]        @relation("userNotifications")
  notificationPreferences    ReceiveNotification[]
  redeemedGifts              GiftCode[]            @relation("userRedeemedCodes")
  premiumSubscription        PremiumSubscription?  @relation("userPremiumSubscription")
  lastRandomPrize            DateTime?
  upvotedComments            GameComment[]         @relation("upvotedComments")
  downvotedComments          GameComment[]         @relation("downvotedComments")
  warningViewed              Boolean               @default(false)
  warning                    String                @default("")
  secrets                    Secret[]              @relation("userSecrets")
  lastSeen                   DateTime              @default(now())
  enrolledInPreview          Boolean               @default(false)
  timeZone                   String                @default("UTC+12")
  donatedFunds               GameFund[]            @relation("donatedFunds")
  checklists                 Checklist[]           @relation("userChecklists")
  oauthApps                  OAuth2Client[]        @relation("oauth2Clients")
  connectedAccounts          ConnectedAccount[]    @relation("connectedAccounts")
  oauthAccessTokens          OAuth2Access[]        @relation("oauth2Access")
  discordAccount             DiscordConnectCode?   @relation("discordAccount")
  alias                      String?
  previousUsernames          String[]
  emailRequiredLogin         Boolean               @default(false)
  emailLoginRequests         EmailLoginRequest[]   @relation("emailLoginRequests")
}

model ConnectedAccount {
  id        String @id @default(uuid())
  type      String
  accountId String
  user      User   @relation("connectedAccounts", fields: [userId], references: [id])
  userId    Int
}

model DiscordConnectCode {
  id            String   @id @default(uuid())
  code          String
  imageUrl      String
  username      String
  discriminator String
  discordId     String
  createdAt     DateTime @default(now())
  user          User?    @relation("discordAccount", fields: [userId], references: [id])
  userId        Int?     @unique
}

model Avatar {
  id            String @id @default(uuid())
  user          User   @relation("avatar", references: [id], fields: [userId])
  userId        Int    @unique
  headColor     String @default("rgb(244, 204, 67)")
  leftArmColor  String @default("rgb(244, 204, 67)")
  leftLegColor  String @default("rgb(165, 188, 80)")
  rightArmColor String @default("rgb(244, 204, 67)")
  rightLegColor String @default("rgb(165, 188, 80)")
  torsoColor    String @default("rgb(23, 107, 170)")
}

model GiftCode {
  id           String        @id @default(uuid())
  code         String
  grant        GiftCodeGrant @default(PREMIUM_ONE_MONTH)
  redeemed     Boolean       @default(false)
  redeemedAt   DateTime
  redeemedBy   User?         @relation("userRedeemedCodes", references: [id], fields: [redeemedById])
  redeemedById Int?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())
}

model PremiumSubscription {
  id         String                  @id @default(uuid())
  user       User                    @relation("userPremiumSubscription", references: [id], fields: [userId])
  userId     Int                     @unique
  createdAt  DateTime                @default(now())
  expiresAt  DateTime                @default(now())
  type       PremiumSubscriptionType @default(PREMIUM_ONE_MONTH)
  lastReward DateTime                @default(now())
}

model EmailVerification {
  id        String   @id @default(uuid())
  user      User     @relation("emailVerification", references: [id], fields: [userId])
  userId    Int
  code      String   @default(uuid())
  createdAt DateTime @default(now())
}

model Secret {
  id        String   @id @default(uuid())
  user      User     @relation("userSecrets", references: [id], fields: [userId])
  userId    Int
  name      String
  code      String   @default(uuid())
  createdAt DateTime @default(now())
}

model CodeSnippet {
  id          String   @id @default(uuid())
  user        User     @relation("userCodeSnippets", references: [id], fields: [userId])
  userId      Int
  code        String
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

model Invite {
  id   String  @id @default(uuid())
  code String
  used Boolean @default(false)
}

model Session {
  id     String          @id @default(uuid())
  user   User            @relation("userSessions", fields: [userId], references: [id])
  userId Int
  token  String          @unique
  ip     String          @default("")
  ua     String          @default("")
  os     OperatingSystem @default(OTHER)
}

enum OperatingSystem {
  WINDOWS
  MACOS
  LINUX
  ANDROID
  IOS
  OTHER
}

model Message {
  id          String   @id @default(uuid())
  sender      User     @relation("messageSender", references: [id], fields: [senderId])
  senderId    Int
  recipient   User     @relation("messageRecipient", references: [id], fields: [recipientId])
  recipientId Int
  message     String
  createdAt   DateTime @default(now())
  system      Boolean  @default(false)
}

enum GameGenre {
  ACTION
  ADVENTURE
  RPG
  STRATEGY
  SIMULATION
  SPORTS
  PUZZLE
  RACING
  ROLE_PLAYING
  HORROR
  FANTASY
  MMO
  SHOOTER
  OTHER
}

model Game {
  id                   Int           @id @default(autoincrement())
  name                 String
  genre                GameGenre
  description          String
  maxPlayersPerSession Int           @default(15)
  updates              Update[]      @relation("updates")
  author               User          @relation("gameAuthor", fields: [authorId], references: [id])
  authorId             Int
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @default(now())
  iconUri              String
  gallery              String[]
  likedBy              User[]        @relation("likedGames")
  dislikedBy           User[]        @relation("dislikedGames")
  visits               Int           @default(0)
  connection           Connection[]  @relation("gameConnection")
  comments             GameComment[] @relation("gameComments")
  playing              Int           @default(0)
  funds                GameFund[]    @relation("gameFunds")
  rating               Rating?       @relation("gameRating")
}

model GameComment {
  id          String   @id @default(uuid())
  game        Game     @relation("gameComments", fields: [gameId], references: [id])
  gameId      Int
  user        User     @relation("userGameComments", fields: [userId], references: [id])
  userId      Int
  text        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  upvotedBy   User[]   @relation("upvotedComments")
  downvotedBy User[]   @relation("downvotedComments")
}

model NucleusKey {
  id           String     @id @default(uuid())
  user         User       @relation("nucleusKeys", fields: [userId], references: [id])
  userId       Int
  key          String     @default(uuid())
  name         String     @default("Nucleus key")
  connection   Connection @relation("nucleusKeyConnection", fields: [connectionId], references: [id])
  connectionId String
}

model GameFund {
  id           String   @id @default(uuid())
  game         Game     @relation("gameFunds", fields: [gameId], references: [id])
  gameId       Int
  name         String
  target       Int
  current      Int
  donors       User[]   @relation("donatedFunds")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
  lastDonation DateTime @default(now())
}

model NucleusAuthTicket {
  id        String  @id @default(uuid())
  user      User    @relation("authTickets", fields: [userId], references: [id])
  userId    Int
  ticket    String  @default(uuid())
  fulfilled Boolean @default(false)
}

model Connection {
  id         String       @id @default(uuid())
  game       Game         @relation("gameConnection", fields: [gameId], references: [id])
  gameId     Int
  ip         String
  port       Int
  online     Boolean      @default(false)
  nucleusKey NucleusKey[] @relation("nucleusKeyConnection")
}

model Update {
  id          Int      @id @default(autoincrement())
  game        Game     @relation("updates", fields: [gameId], references: [id])
  gameId      Int
  tag         String
  description String
  releaseDate DateTime @default(now())
}

model Transaction {
  id          String   @id @default(uuid())
  user        User     @relation("userTransactions", fields: [userId], references: [id])
  userId      Int
  to          String
  tickets     Int
  description String
  createdAt   DateTime @default(now())
}

model UserReport {
  id          String   @id @default(uuid())
  user        User     @relation("userReportedBy", fields: [userId], references: [id])
  userId      Int
  reason      String
  description String
  author      User     @relation("userReportAuthor", fields: [authorId], references: [id])
  authorId    Int
  processed   Boolean  @default(false)
  createdAt   DateTime @default(now())
}

enum NotificationType {
  INFO
  ALERT
  SUCCESS
  LOGIN
}

model Notification {
  id        String           @id @default(uuid())
  user      User             @relation("userNotifications", fields: [userId], references: [id])
  userId    Int
  message   String
  type      NotificationType @default(INFO)
  title     String           @default("")
  createdAt DateTime         @default(now())
}

model Checklist {
  id          String          @id @default(uuid())
  user        User            @relation("userChecklists", fields: [userId], references: [id])
  userId      Int
  name        String
  description String
  createdAt   DateTime        @default(now())
  items       ChecklistItem[] @relation("checklistItems")
}

model ChecklistItem {
  id          String    @id @default(uuid())
  checklist   Checklist @relation("checklistItems", fields: [checklistId], references: [id])
  checklistId String
  name        String
  description String
  createdAt   DateTime  @default(now())
  completed   Boolean   @default(false)
  scheduled   DateTime?
  tags        String[]
}

enum RatingType {
  EC
  E
  E10
  T
  M
  AO
  RP
}

enum RatingCategoryScore {
  PASSING
  FAILING
}

model Rating {
  id     String        @id @default(uuid())
  game   Game?         @relation("gameRating", fields: [gameId], references: [id])
  gameId Int?          @unique
  type   RatingType
  scores RatingScore[] @relation("gameRatingCategory")
}

enum RatingCategory {
  SOCIAL
  DRUGS
  NUDITY
}

model RatingScore {
  id          String              @id @default(uuid())
  rating      Rating              @relation("gameRatingCategory", fields: [ratingId], references: [id])
  ratingId    String
  category    RatingCategory
  score       RatingCategoryScore
  description String
}

model OAuth2Client {
  id          String         @id @default(uuid())
  name        String
  description String
  secret      String         @default(uuid())
  redirectUri String[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @default(now())
  grants      Grant[]
  users       User[]         @relation("oauth2Clients")
  access      OAuth2Access[] @relation("oauth2ClientAccess")
}

enum Grant {
  USER_READ
  USER_CONNECTIONS_ADD
}

model OAuth2Access {
  id        String       @id @default(uuid())
  client    OAuth2Client @relation("oauth2ClientAccess", fields: [clientId], references: [id])
  clientId  String
  user      User         @relation("oauth2Access", fields: [userId], references: [id])
  userId    Int
  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(now())
  expiresAt DateTime
}

model BannedIP {
  id        String   @id @default(uuid())
  ip        String
  reason    String
  createdAt DateTime @default(now())
}

model EmailLoginRequest {
  id        String   @id @default(uuid())
  user      User     @relation("emailLoginRequests", fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  code      String?
}
