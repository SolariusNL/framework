// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id                     Int             @id @default(autoincrement())
  username               String
  email                  String
  password               String
  tickets                Int             @default(500)
  premium                Boolean         @default(false)
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @default(now())
  role                   Role            @default(USER)
  outboundFriendRequests FriendRequest[] @relation("outboundFriendRequests")
  inboundFriendRequests  FriendRequest[] @relation("inboundFriendRequests")
  friends                User[]          @relation("friends")
  friendsRelation        User[]          @relation("friends")
  sessions               Session[]       @relation("userSessions")
  games                  Game[]          @relation("gameAuthor")
  avatarUri              String
  likedGames             Game[]          @relation("likedGames")
  dislikedGames          Game[]          @relation("dislikedGames")
  nucleusKeys            NucleusKey[]    @relation("nucleusKeys")
  gameComments           GameComment[]   @relation("userGameComments")
  avatar                 Avatar?         @relation("avatar")
  country                String          @default("")
  snippets               CodeSnippet[]   @relation("userCodeSnippets")
  bio                    String          @default("This user has not yet written a bio.")
  busy                   Boolean         @default(false)
}

model Avatar {
  id            String @id @default(uuid())
  user          User   @relation("avatar", references: [id], fields: [userId])
  userId        Int    @unique
  headColor     String @default("rgb(244, 204, 67)")
  leftArmColor  String @default("rgb(244, 204, 67)")
  leftLegColor  String @default("rgb(165, 188, 80)")
  rightArmColor String @default("rgb(244, 204, 67)")
  rightLegColor String @default("rgb(165, 188, 80)")
  torsoColor    String @default("rgb(23, 107, 170)")
}

model CodeSnippet {
  id          String   @id @default(uuid())
  user        User     @relation("userCodeSnippets", references: [id], fields: [userId])
  userId      Int      @unique
  code        String
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

model Invite {
  id   String  @id @default(uuid())
  code String
  used Boolean @default(false)
}

model Session {
  id     String @id @default(uuid())
  user   User   @relation("userSessions", fields: [userId], references: [id])
  userId Int
  token  String @unique
}

model FriendRequest {
  id         String   @id @default(uuid())
  sender     User     @relation("outboundFriendRequests", fields: [senderId], references: [id])
  senderId   Int
  receiver   User     @relation("inboundFriendRequests", fields: [receiverId], references: [id])
  receiverId Int
  createdAt  DateTime @default(now())
}

enum GameGenre {
  ACTION
  ADVENTURE
  RPG
  STRATEGY
  SIMULATION
  SPORTS
  PUZZLE
  RACING
  ROLE_PLAYING
  HORROR
  FANTASY
  MMO
  SHOOTER
  OTHER
}

model Game {
  id                   Int           @id @default(autoincrement())
  name                 String
  genre                GameGenre
  description          String
  maxPlayersPerSession Int           @default(15)
  updates              Update[]      @relation("updates")
  author               User          @relation("gameAuthor", fields: [authorId], references: [id])
  authorId             Int
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @default(now())
  iconUri              String
  gallery              String[]
  likedBy              User[]        @relation("likedGames")
  dislikedBy           User[]        @relation("dislikedGames")
  visits               Int           @default(0)
  connection           Connection[]  @relation("gameConnection")
  comments             GameComment[] @relation("gameComments")
}

model GameComment {
  id        String   @id @default(uuid())
  game      Game     @relation("gameComments", fields: [gameId], references: [id])
  gameId    Int
  user      User     @relation("userGameComments", fields: [userId], references: [id])
  userId    Int
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model NucleusKey {
  id     String @id @default(uuid())
  user   User   @relation("nucleusKeys", fields: [userId], references: [id])
  userId Int
  key    String @default(uuid())
  name   String @default("Nucleus key")
}

model Connection {
  id     String  @id @default(uuid())
  game   Game    @relation("gameConnection", fields: [gameId], references: [id])
  gameId Int
  ip     String
  port   Int
  online Boolean @default(false)
}

model Update {
  id          Int      @id @default(autoincrement())
  game        Game     @relation("updates", fields: [gameId], references: [id])
  gameId      Int
  tag         String
  description String
  releaseDate DateTime @default(now())
}
