// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum ReceiveNotification {
  RECEIVED_DONATION
  SENT_DONATION
  LOGIN
  ADMIN_REPORTS
  SERVER_OFFLINE
  MISSED_MESSAGES
}

enum PrivacyPreferences {
  RECORD_SEARCH
  USAGE_ANALYTICS
  RECEIVE_NEWSLETTER
  USER_DISCOVERY
}

enum PremiumSubscriptionType {
  PREMIUM_ONE_MONTH
  PREMIUM_SIX_MONTHS
  PREMIUM_ONE_YEAR
}

enum GiftCodeGrant {
  PREMIUM_ONE_MONTH
  PREMIUM_SIX_MONTHS
  PREMIUM_ONE_YEAR
  THOUSAND_TICKETS
  TWOTHOUSAND_TICKETS
  FIVETHOUSAND_TICKETS
  SIXTEENTHOUSAND_TICKETS
}

model User {
  id                         Int                    @id @default(autoincrement())
  username                   String
  email                      String
  password                   String
  tickets                    Int                    @default(500)
  premium                    Boolean                @default(false)
  createdAt                  DateTime               @default(now())
  updatedAt                  DateTime               @default(now())
  role                       Role                   @default(USER)
  following                  User[]                 @relation("userFollows")
  followers                  User[]                 @relation("userFollows")
  sessions                   Session[]              @relation("userSessions")
  games                      Game[]                 @relation("gameAuthor")
  avatarUri                  String
  likedGames                 Game[]                 @relation("likedGames")
  dislikedGames              Game[]                 @relation("dislikedGames")
  nucleusKeys                NucleusKey[]           @relation("nucleusKeys")
  gameComments               GameComment[]          @relation("userGameComments")
  avatar                     Avatar?                @relation("avatar")
  country                    String                 @default("")
  snippets                   CodeSnippet[]          @relation("userCodeSnippets")
  bio                        String                 @default("This user has not yet written a bio.")
  busy                       Boolean                @default(false)
  banned                     Boolean                @default(false)
  banReason                  String                 @default("")
  banExpires                 DateTime?
  emailVerificationInstances EmailVerification[]    @relation("emailVerification")
  emailVerified              Boolean                @default(false)
  authTickets                NucleusAuthTicket[]    @relation("authTickets")
  receivedMessages           Message[]              @relation("messageRecipient")
  sentMessages               Message[]              @relation("messageSender")
  reports                    UserReport[]           @relation("userReportAuthor")
  reportedBy                 UserReport[]           @relation("userReportedBy")
  transactions               Transaction[]          @relation("userTransactions")
  notifications              Notification[]         @relation("userNotifications")
  notificationPreferences    ReceiveNotification[]
  redeemedGifts              GiftCode[]             @relation("userRedeemedCodes")
  premiumSubscription        PremiumSubscription?   @relation("userPremiumSubscription")
  lastRandomPrize            DateTime?
  upvotedComments            GameComment[]          @relation("upvotedComments")
  downvotedComments          GameComment[]          @relation("downvotedComments")
  warningViewed              Boolean                @default(false)
  warning                    String                 @default("")
  secrets                    Secret[]               @relation("userSecrets")
  lastSeen                   DateTime               @default(now())
  enrolledInPreview          Boolean                @default(false)
  timeZone                   String                 @default("UTC+12")
  donatedFunds               GameFund[]             @relation("donatedFunds")
  checklists                 Checklist[]            @relation("userChecklists")
  connectedAccounts          ConnectedAccount[]     @relation("connectedAccounts")
  discordAccount             DiscordConnectCode?    @relation("discordAccount")
  alias                      String?
  previousUsernames          String[]
  previousEmails             String[]
  emailRequiredLogin         Boolean                @default(false)
  emailLoginRequests         EmailLoginRequest[]    @relation("emailLoginRequests")
  lastUsernameChange         DateTime?
  statusPosts                StatusPosts[]          @relation("statusPosts")
  profileLinks               ProfileLink[]          @relation("profileLinks")
  notes                      UserAdminNotes[]       @relation("adminNotes")
  authoredNotes              UserAdminNotes[]       @relation("adminNotesAuthor")
  hiddenHomeWidgets          String[]
  adminActivityLogs          AdminActivityLog[]     @relation("adminActivityLog")
  ownedGamepasses            Gamepass[]             @relation("userGamepasses")
  playing                    Game?                  @relation("userPlaying", fields: [gameId], references: [id])
  gameId                     Int?
  punishmentHistory          PunishmentLog[]        @relation("punishmentLog")
  issuedPunishments          PunishmentLog[]        @relation("punishmentLogAuthor")
  privacyPreferences         PrivacyPreferences[]   @default([USER_DISCOVERY])
  passwordResetRequired      Boolean                @default(false)
  emailResetRequired         Boolean                @default(false)
  adminPermissions           AdminPermission[]
  authoredAdminArticles      AdminArticle[]         @relation("adminArticles")
  viewedAdminArticles        AdminArticle[]         @relation("adminArticlesViewed")
  otpEnabled                 Boolean                @default(false)
  otpVerified                Boolean                @default(false)
  otpAscii                   String?
  otpHex                     String?
  otpBase32                  String?
  otpAuthUrl                 String?
  authoredBlogPosts          BlogPost[]             @relation("blogPosts")
  authoredSupportTickets     SupportTicket[]        @relation("supportTickets")
  sentChatMessages           ChatMessage[]          @relation("sentChatMessages")
  receivedChatMessages       ChatMessage[]          @relation("receivedChatMessages")
  employee                   Employee?              @relation("employee")
  employeeId                 String?                @unique
  apiKeys                    ApiKey[]               @relation("apiKeys")
  boardPosts                 PortalBoardPost[]      @relation("portalBoardPosts")
  upvotedBoardPosts          PortalBoardPost[]      @relation("portalBoardPostUpvotes")
  downvotedBoardPosts        PortalBoardPost[]      @relation("portalBoardPostDownvotes")
  referral                   Referral?              @relation("referrals")
  referralId                 String?
  usedReferral               Referral?              @relation("usedReferral", fields: [usedReferralId], references: [id])
  usedReferralId             String?
  loginQR                    LoginQR?               @relation("loginQRs")
  quickLoginEnabled          Boolean                @default(true)
  privateGameAccess          Game[]                 @relation("privateGameAccess")
  purchasedGames             Game[]                 @relation("purchasedGames")
  followedGames              Game[]                 @relation("gameFollowers")
  passwordResetRequests      PasswordResetRequest[] @relation("passwordResetRequests")
  createdInvites             Invite[]               @relation("userInvites")
  claimedSupportTickets      SupportTicket[]        @relation("claimedSupportTickets")
  apartOf                    Team[]                 @relation("teamMembers")
  staffOf                    Team[]                 @relation("teamStaff")
  bannedFrom                 Team[]                 @relation("teamBans")
  ownedTeams                 Team[]                 @relation("teamOwner")
  invitedToTeams             Team[]                 @relation("teamInvites")
  newsletterSubscribed       Boolean                @default(false)
  newsletterEmail            String?
  oauthApps                  OAuthApplication[]     @relation("oauthApplications")
  oauthClients               OAuthClient[]          @relation("oauthClients")
  lastSurvey                 DateTime?
  ratings                    Survey[]               @relation("userRatings")
  createdGiftCodes           GiftCode[]             @relation("createdGiftCodes")
  outboundTransactions       Transaction[]          @relation("userTransactionsFrom")
  inboundTransactions        Transaction[]          @relation("userTransactionsTo")
  authoredIssues             TeamIssue[]            @relation("teamIssues")
  assignedIssues             TeamIssue[]            @relation("assignedIssues")
  issueComments              TeamIssueComment[]     @relation("userIssueComments")
  auditLogs                  TeamAuditLog[]         @relation("audited")
  dismissibleContents        String[]
  automodTriggers            AutomodTrigger[]       @relation("automodTriggers")
  domains                    Domain[]               @relation("userDomains")
}

model ConnectedAccount {
  id        String @id @default(uuid())
  type      String
  accountId String
  user      User   @relation("connectedAccounts", fields: [userId], references: [id])
  userId    Int
}

enum AdminPermission {
  WRITE_ARTICLE
  PUNISH_USERS
  RUN_ACTIONS
  EDIT_PERMISSIONS
  WRITE_BLOG_POST
  CHANGE_INSTANCE_SETTINGS
  IMPERSONATE_USERS
  GENERATE_GIFTS
}

enum DomainStatus {
  UNVERIFIED
  VERIFIED
  GENERATING_CERTIFICATE
  COMPLETE
}

model Domain {
  id        String       @id @default(uuid())
  createdAt DateTime     @default(now())
  user      User         @relation("userDomains", fields: [userId], references: [id])
  userId    Int
  domain    String
  status    DomainStatus @default(UNVERIFIED)
  txtRecord String
}

model DiscordConnectCode {
  id            String   @id @default(uuid())
  code          String
  imageUrl      String
  username      String
  discriminator String
  discordId     String
  createdAt     DateTime @default(now())
  user          User?    @relation("discordAccount", fields: [userId], references: [id])
  userId        Int?     @unique
}

model Avatar {
  id            String @id @default(uuid())
  user          User   @relation("avatar", references: [id], fields: [userId])
  userId        Int    @unique
  headColor     String @default("rgb(244, 204, 67)")
  leftArmColor  String @default("rgb(244, 204, 67)")
  leftLegColor  String @default("rgb(165, 188, 80)")
  rightArmColor String @default("rgb(244, 204, 67)")
  rightLegColor String @default("rgb(165, 188, 80)")
  torsoColor    String @default("rgb(23, 107, 170)")
}

model GiftCode {
  id           String        @id @default(uuid())
  code         String
  grant        GiftCodeGrant @default(PREMIUM_ONE_MONTH)
  redeemed     Boolean       @default(false)
  redeemedAt   DateTime
  redeemedBy   User?         @relation("userRedeemedCodes", references: [id], fields: [redeemedById])
  redeemedById Int?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())
  createdBy    User?         @relation("createdGiftCodes", references: [id], fields: [createdById])
  createdById  Int?
}

model PremiumSubscription {
  id         String                  @id @default(uuid())
  user       User                    @relation("userPremiumSubscription", references: [id], fields: [userId])
  userId     Int                     @unique
  createdAt  DateTime                @default(now())
  expiresAt  DateTime                @default(now())
  type       PremiumSubscriptionType @default(PREMIUM_ONE_MONTH)
  lastReward DateTime                @default(now())
}

model EmailVerification {
  id        String   @id @default(uuid())
  user      User     @relation("emailVerification", references: [id], fields: [userId])
  userId    Int
  code      String   @default(uuid())
  createdAt DateTime @default(now())
}

model Secret {
  id        String   @id @default(uuid())
  user      User     @relation("userSecrets", references: [id], fields: [userId])
  userId    Int
  name      String
  code      String   @default(uuid())
  createdAt DateTime @default(now())
}

model CodeSnippet {
  id          String   @id @default(uuid())
  user        User     @relation("userCodeSnippets", references: [id], fields: [userId])
  userId      Int
  code        String
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

model Invite {
  id          String   @id @default(uuid())
  code        String
  used        Boolean  @default(false)
  createdBy   User?    @relation("userInvites", references: [id], fields: [createdById])
  createdById Int?
  createdAt   DateTime @default(now())
  sentToEmail String?
}

model Session {
  id            String            @id @default(uuid())
  user          User              @relation("userSessions", fields: [userId], references: [id])
  userId        Int
  token         String            @unique
  ip            String            @default("")
  ua            String            @default("")
  os            OperatingSystem   @default(OTHER)
  impersonation Boolean           @default(false)
  oauth         OAuthApplication? @relation("oauthSessions", fields: [oauthId], references: [id])
  oauthId       String?
}

enum OperatingSystem {
  WINDOWS
  MACOS
  LINUX
  ANDROID
  IOS
  OTHER
}

model Message {
  id          String   @id @default(uuid())
  sender      User     @relation("messageSender", references: [id], fields: [senderId])
  senderId    Int
  recipient   User     @relation("messageRecipient", references: [id], fields: [recipientId])
  recipientId Int
  message     String
  title       String
  createdAt   DateTime @default(now())
  system      Boolean  @default(false)
  important   Boolean  @default(false)
  archived    Boolean  @default(false)
  read        Boolean  @default(false)
}

enum GameGenre {
  ACTION
  ADVENTURE
  RPG
  STRATEGY
  SIMULATION
  SPORTS
  PUZZLE
  RACING
  ROLE_PLAYING
  HORROR
  FANTASY
  MMO
  SHOOTER
  OTHER
}

model Game {
  id                   Int                       @id @default(autoincrement())
  name                 String
  genre                GameGenre
  description          String
  maxPlayersPerSession Int                       @default(15)
  updates              Update[]                  @relation("updates")
  author               User                      @relation("gameAuthor", fields: [authorId], references: [id])
  authorId             Int
  createdAt            DateTime                  @default(now())
  updatedAt            DateTime                  @default(now())
  iconUri              String
  gallery              String[]
  likedBy              User[]                    @relation("likedGames")
  dislikedBy           User[]                    @relation("dislikedGames")
  visits               Int                       @default(0)
  connection           Connection[]              @relation("gameConnection")
  comments             GameComment[]             @relation("gameComments")
  playing              Int                       @default(0)
  playingUsers         User[]                    @relation("userPlaying")
  funds                GameFund[]                @relation("gameFunds")
  rating               Rating?                   @relation("gameRating")
  datastores           GameDatastore[]           @relation("gameDatastore")
  gamepasses           Gamepass[]                @relation("gamepasses")
  copyrightMetadata    GameCopyrightMetadata[]   @relation("gameCopyrightMetadata")
  gameReports          UserReport[]              @relation("gameReport")
  private              Boolean                   @default(false)
  privateAccess        User[]                    @relation("privateGameAccess")
  paywall              Boolean                   @default(false)
  paywallAccess        User[]                    @relation("purchasedGames")
  paywallPrice         Int                       @default(1)
  followers            User[]                    @relation("gameFollowers")
  updateLogs           GameUpdateLog[]           @relation("gameUpdateLogs")
  envs                 GameEnvironmentVariable[] @relation("environmentVariables")
  team                 Team?                     @relation("teamGame", fields: [teamId], references: [id])
  teamId               String?
  issues               TeamIssue[]               @relation("gameIssues")
}

model GameComment {
  id          String   @id @default(uuid())
  game        Game     @relation("gameComments", fields: [gameId], references: [id])
  gameId      Int
  user        User     @relation("userGameComments", fields: [userId], references: [id])
  userId      Int
  text        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  upvotedBy   User[]   @relation("upvotedComments")
  downvotedBy User[]   @relation("downvotedComments")
}

model NucleusKey {
  id           String     @id @default(uuid())
  user         User       @relation("nucleusKeys", fields: [userId], references: [id])
  userId       Int
  key          String     @default(uuid())
  name         String     @default("Nucleus key")
  connection   Connection @relation("nucleusKeyConnection", fields: [connectionId], references: [id])
  connectionId String
}

model GameFund {
  id            String   @id @default(uuid())
  game          Game     @relation("gameFunds", fields: [gameId], references: [id])
  description   String   @default("This was created before the release of Funds 2, so no description was provided.")
  descriptionMd String   @default("")
  gameId        Int
  name          String
  target        Int
  current       Int
  donors        User[]   @relation("donatedFunds")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  lastDonation  DateTime @default(now())
}

model GameDatastore {
  id        String                      @id @default(uuid())
  game      Game                        @relation("gameDatastore", fields: [gameId], references: [id])
  gameId    Int
  data      GameDatastoreKeyValuePair[] @relation("gameDatastoreData")
  storeId   String
  name      String
  desc      String
  createdAt DateTime                    @default(now())
  updatedAt DateTime                    @default(now())
}

model GameDatastoreKeyValuePair {
  id              String        @id @default(uuid())
  key             String
  value           Json
  gameDatastore   GameDatastore @relation("gameDatastoreData", fields: [gameDatastoreId], references: [id])
  gameDatastoreId String
}

model NucleusAuthTicket {
  id        String  @id @default(uuid())
  user      User    @relation("authTickets", fields: [userId], references: [id])
  userId    Int
  ticket    String  @default(uuid())
  fulfilled Boolean @default(false)
}

model Connection {
  id               String          @id @default(uuid())
  game             Game            @relation("gameConnection", fields: [gameId], references: [id])
  gameId           Int
  ip               String
  port             Int
  online           Boolean         @default(false)
  nucleusKey       NucleusKey[]    @relation("nucleusKeyConnection")
  stdout           NucleusStdout[] @relation("nucleusStdout")
  reportedMemoryGb Float?          @default(0)
  reportedCores    Int?            @default(0)
  reportedDiskGb   Float?          @default(0)
  protocol         String          @default("P-1000")
  commands         CosmicCommand[] @relation("cosmicCommands")
}

model CosmicCommand {
  id          String     @id @default(uuid())
  name        String
  usage       String
  description String
  connection  Connection @relation("cosmicCommands", fields: [connId], references: [id])
  connId      String
}

model Update {
  id          Int      @id @default(autoincrement())
  game        Game     @relation("updates", fields: [gameId], references: [id])
  gameId      Int
  tag         String
  description String
  releaseDate DateTime @default(now())
}

model Transaction {
  id          String          @id @default(uuid())
  user        User            @relation("userTransactions", fields: [userId], references: [id])
  userId      Int
  tickets     Int
  description String
  createdAt   DateTime        @default(now())
  type        TransactionType
  from        User?           @relation("userTransactionsFrom", fields: [fromId], references: [id])
  fromId      Int?
  fromString  String?
  to          User?           @relation("userTransactionsTo", fields: [toId], references: [id])
  toId        Int?
  toString    String?
}

enum TransactionType {
  INBOUND
  OUTBOUND
}

model UserReport {
  id          String   @id @default(uuid())
  user        User     @relation("userReportedBy", fields: [userId], references: [id])
  userId      Int
  reason      String
  description String
  author      User     @relation("userReportAuthor", fields: [authorId], references: [id])
  authorId    Int
  processed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  game        Game?    @relation("gameReport", fields: [gameId], references: [id])
  gameId      Int?
}

enum NotificationType {
  INFO
  ALERT
  SUCCESS
  LOGIN
  GIFT
}

model Notification {
  id        String           @id @default(uuid())
  user      User             @relation("userNotifications", fields: [userId], references: [id])
  userId    Int
  message   String
  type      NotificationType @default(INFO)
  title     String           @default("")
  createdAt DateTime         @default(now())
}

model Checklist {
  id          String          @id @default(uuid())
  user        User            @relation("userChecklists", fields: [userId], references: [id])
  userId      Int
  name        String
  description String
  createdAt   DateTime        @default(now())
  items       ChecklistItem[] @relation("checklistItems")
}

model ChecklistItem {
  id          String    @id @default(uuid())
  checklist   Checklist @relation("checklistItems", fields: [checklistId], references: [id])
  checklistId String
  name        String
  description String
  createdAt   DateTime  @default(now())
  completed   Boolean   @default(false)
  scheduled   DateTime?
  tags        String[]
}

enum RatingType {
  EC
  E
  E10
  T
  M
  AO
  RP
}

enum RatingCategoryScore {
  PASSING
  FAILING
}

model Rating {
  id     String        @id @default(uuid())
  game   Game?         @relation("gameRating", fields: [gameId], references: [id])
  gameId Int?          @unique
  type   RatingType
  scores RatingScore[] @relation("gameRatingCategory")
}

enum RatingCategory {
  SOCIAL
  DRUGS
  NUDITY
}

model RatingScore {
  id          String              @id @default(uuid())
  rating      Rating              @relation("gameRatingCategory", fields: [ratingId], references: [id])
  ratingId    String
  category    RatingCategory
  score       RatingCategoryScore
  description String
}

enum Grant {
  USER_READ
  USER_CONNECTIONS_ADD
}

model BannedIP {
  id        String   @id @default(uuid())
  ip        String
  reason    String
  createdAt DateTime @default(now())
}

model EmailLoginRequest {
  id        String   @id @default(uuid())
  user      User     @relation("emailLoginRequests", fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  code      String?
}

model StatusPosts {
  id        String   @id @default(uuid())
  user      User     @relation("statusPosts", fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  content   String
}

model ProfileLink {
  id        String   @id @default(uuid())
  user      User     @relation("profileLinks", fields: [userId], references: [id])
  userId    Int
  name      String
  url       String
  createdAt DateTime @default(now())
}

model UserAdminNotes {
  id        String   @id @default(uuid())
  user      User     @relation("adminNotes", fields: [userId], references: [id])
  userId    Int
  author    User     @relation("adminNotesAuthor", fields: [authorId], references: [id])
  authorId  Int
  createdAt DateTime @default(now())
  content   String
}

model AdminActivityLog {
  id         String   @id @default(uuid())
  user       User     @relation("adminActivityLog", fields: [userId], references: [id])
  userId     Int
  activity   String
  importance Int
  createdAt  DateTime @default(now())
}

model Gamepass {
  id           String   @id @default(uuid())
  game         Game     @relation("gamepasses", fields: [gameId], references: [id])
  gameId       Int
  name         String
  description  String
  price        Int
  iconUri      String   @default("")
  createdAt    DateTime @default(now())
  owners       User[]   @relation("userGamepasses")
  totalRevenue Int      @default(0)
}

model CosmicWebhookSignature {
  id        String   @id @default(uuid())
  secret    String   @default(uuid())
  createdAt DateTime @default(now())
}

model PunishmentLog {
  id           String         @id @default(uuid())
  user         User           @relation("punishmentLog", fields: [userId], references: [id])
  userId       Int
  punishedBy   User           @relation("punishmentLogAuthor", fields: [punishedById], references: [id])
  punishedById Int
  reason       String
  createdAt    DateTime       @default(now())
  type         PunishmentType
  internalNote String         @default("No internal note provided. (before 25/04/2023)")
}

enum PunishmentType {
  BAN
  WARNING
}

model GameCopyrightMetadata {
  id          String   @id @default(uuid())
  game        Game     @relation("gameCopyrightMetadata", fields: [gameId], references: [id])
  gameId      Int
  title       String
  description String
  createdAt   DateTime @default(now())
}

model AdminArticle {
  id        String   @id @default(uuid())
  author    User     @relation("adminArticles", fields: [authorId], references: [id])
  authorId  Int
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  tags      String[]
  viewers   User[]   @relation("adminArticlesViewed")
}

model BlogPost {
  id        String   @id @default(uuid())
  author    User     @relation("blogPosts", fields: [authorId], references: [id])
  authorId  Int
  title     String
  subtitle  String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  tags      String[]
  views     Int      @default(0)
  featured  Boolean  @default(false)
  slug      String   @unique @default(uuid())
}

model SupportTicket {
  id           String              @id @default(uuid())
  author       User?               @relation("supportTickets", fields: [authorId], references: [id])
  authorId     Int?
  title        String
  content      String
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @default(now())
  category     String
  status       SupportTicketStatus
  contactEmail String
  contactName  String?
  claimedBy    User?               @relation("claimedSupportTickets", fields: [claimedById], references: [id])
  claimedById  Int?
}

enum SupportTicketStatus {
  OPEN
  CLOSED
}

model ChatMessage {
  id        String   @id @default(uuid())
  author    User     @relation("sentChatMessages", fields: [authorId], references: [id])
  authorId  Int
  to        User     @relation("receivedChatMessages", fields: [toId], references: [id])
  toId      Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  seen      Boolean  @default(false)
}

model Employee {
  id                String               @id @default(uuid())
  user              User?                @relation("employee", fields: [userId], references: [id])
  userId            Int?                 @unique
  role              EmployeeRole         @default(CONTENT_MODERATOR)
  fullName          String
  contractExpiresAt DateTime
  createdAt         DateTime             @default(now())
  contactEmail      String
  probationary      Boolean              @default(true)
  nextAssessmentAt  DateTime             @default(now())
  assessmentHistory EmployeeAssessment[] @relation("assessmentHistory")
  location          String               @default("No location provided.")
  skills            String[]             @default([])
  bio               String               @default("No bio provided.")
  tasks             EmployeeTask[]       @relation("employeeTasks")
  posts             EmployeePost[]       @relation("employeePosts")
}

enum EmployeeRole {
  CONTENT_MODERATOR
  SUPPORT_AGENT
  SOFTWARE_ENGINEER
  INVESTOR
  MARKETING
  VICE_PRESIDENT
  PRESIDENT
  LEGAL_COUNSEL
  SENIOR_SOFTWARE_ENGINEER
  NETWORK_ADMINISTRATOR
  NETWORK_ENGINEER
  EXECUTIVE_VICE_PRESIDENT
}

model EmployeeAssessment {
  id         String   @id @default(uuid())
  employee   Employee @relation("assessmentHistory", fields: [employeeId], references: [id])
  employeeId String
  createdAt  DateTime @default(now())
  score      Int
}

model ApiKey {
  id          String             @id @default(uuid())
  name        String
  key         String             @unique
  permissions ApiKeyPermission[]
  createdAt   DateTime           @default(now())
  user        User               @relation("apiKeys", fields: [userId], references: [id])
  userId      Int
}

enum ApiKeyPermission {
  USER_PROFILE_READ
  USER_PROFILE_WRITE
  USER_GAMES_READ
  USER_GAMES_WRITE
  GATEWAY
  USER_MEDIA_READ
  USER_CHAT_READ
  USER_CHAT_WRITE
  USER_CHECKLIST_READ
  USER_CHECKLIST_WRITE
}

model EmployeeTask {
  id          String    @id @default(uuid())
  employee    Employee  @relation("employeeTasks", fields: [employeeId], references: [id])
  employeeId  String
  title       String
  content     String
  createdAt   DateTime  @default(now())
  completed   Boolean   @default(false)
  completedAt DateTime?
}

model EmployeePost {
  id         String   @id @default(uuid())
  employee   Employee @relation("employeePosts", fields: [employeeId], references: [id])
  employeeId String
  title      String
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}

model PortalBoardPost {
  id        String   @id @default(uuid())
  author    User     @relation("portalBoardPosts", fields: [authorId], references: [id])
  authorId  Int
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  tags      String[]
  upvotes   User[]   @relation("portalBoardPostUpvotes")
  downvotes User[]   @relation("portalBoardPostDownvotes")
}

model Referral {
  id        String   @id @default(uuid())
  user      User?    @relation("referrals", fields: [userId], references: [id])
  userId    Int?     @unique
  createdAt DateTime @default(now())
  code      Int      @unique
  usedBy    User[]   @relation("usedReferral")
}

model LoginQR {
  id        String   @id @default(uuid())
  user      User?    @relation("loginQRs", fields: [userId], references: [id])
  userId    Int?     @unique
  createdAt DateTime @default(now())
  code      String   @unique @default(uuid())
}

model GameUpdateLog {
  id        String            @id @default(uuid())
  game      Game              @relation("gameUpdateLogs", fields: [gameId], references: [id])
  gameId    Int
  createdAt DateTime          @default(now())
  content   String
  title     String
  tag       String
  type      GameUpdateLogType
}

enum GameUpdateLogType {
  PATCH
  MINOR
  MAJOR
}

model PasswordResetRequest {
  id        String   @id @default(uuid())
  user      User?    @relation("passwordResetRequests", fields: [userId], references: [id])
  userId    Int?     @unique
  createdAt DateTime @default(now())
}

model GameEnvironmentVariable {
  id          String          @id @default(uuid())
  game        Game            @relation("environmentVariables", fields: [gameId], references: [id])
  gameId      Int
  name        String
  value       String
  environment GameEnvironment
  updatedAt   DateTime        @default(now())
}

enum GameEnvironment {
  PRODUCTION
  DEVELOPMENT
}

model Team {
  id                  String                @id @default(uuid())
  name                String
  createdAt           DateTime              @default(now())
  members             User[]                @relation("teamMembers")
  games               Game[]                @relation("teamGame")
  iconUri             String                @default("")
  description         String                @default("")
  descriptionMarkdown String                @default("")
  location            String?               @default("")
  timezone            String?               @default("")
  website             String?               @default("")
  email               String?               @default("")
  owner               User                  @relation("teamOwner", fields: [ownerId], references: [id])
  ownerId             Int
  cakeDay             DateTime              @default(now())
  updatedAt           DateTime              @default(now())
  slug                String                @default("")
  access              TeamAccess            @default(OPEN)
  invited             User[]                @relation("teamInvites")
  issues              TeamIssue[]           @relation("teamIssueRel")
  shout               String?               @default("")
  shoutMd             String?               @default("")
  shoutUpdatedAt      DateTime?             @default(now())
  staff               User[]                @relation("teamStaff")
  staffPermissions    TeamStaffPermission[]
  auditLogs           TeamAuditLog[]        @relation("teamAuditLogs")
  banned              User[]                @relation("teamBans")
}

enum TeamAccess {
  OPEN
  PRIVATE
}

enum OAuthScope {
  USER_PROFILE_READ
  USER_CHATS_READ
  USER_TEAMS_JOIN
  USER_TEAMS_LEAVE
  USER_CHATS_WRITE
  USER_EMAIL_READ
}

model OAuthApplication {
  id          String        @id @default(uuid())
  name        String
  description String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  owner       User          @relation("oauthApplications", fields: [ownerId], references: [id])
  ownerId     Int
  scopes      OAuthScope[]
  secret      String        @unique
  redirectUri String
  clients     OAuthClient[] @relation("oauthCodeApplication")
  sessions    Session[]     @relation("oauthSessions")
  verified    Boolean       @default(false)
}

model OAuthClient {
  id            String           @id @default(uuid())
  application   OAuthApplication @relation(fields: [applicationId], references: [id], name: "oauthCodeApplication")
  applicationId String
  user          User             @relation(fields: [userId], references: [id], name: "oauthClients")
  userId        Int
  code          String           @unique
  createdAt     DateTime         @default(now())
  expiresAt     DateTime
  session       String           @default("")
}

model NucleusStdout {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now())
  line         String
  connectionId String
  connection   Connection @relation("nucleusStdout", fields: [connectionId], references: [id])
}

model Survey {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  rating    Int
  user      User     @relation("userRatings", fields: [userId], references: [id])
  userId    Int
  feedback  String?  @default("No feedback provided.")
}

model TeamIssue {
  id          String                   @id @default(uuid())
  createdAt   DateTime                 @default(now())
  title       String
  content     String
  contentMd   String
  team        Team                     @relation("teamIssueRel", fields: [teamId], references: [id])
  teamId      String
  status      TeamIssueStatus
  game        Game?                    @relation("gameIssues", fields: [gameId], references: [id])
  gameId      Int?
  author      User                     @relation("teamIssues", fields: [authorId], references: [id])
  authorId    Int
  assignee    User?                    @relation("assignedIssues", fields: [assigneeId], references: [id])
  assigneeId  Int?
  comments    TeamIssueComment[]       @relation("issueComments")
  environment TeamIssueEnvironmentType
  tags        String[]
}

enum TeamIssueStatus {
  OPEN
  CLOSED
  DUPLICATE
}

enum TeamIssueEnvironmentType {
  DESKTOP
  MOBILE
  CONSOLE
}

model TeamIssueComment {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  content   String
  contentMd String
  author    User      @relation("userIssueComments", fields: [authorId], references: [id])
  authorId  Int
  issue     TeamIssue @relation("issueComments", fields: [issueId], references: [id])
  issueId   String
}

enum TeamStaffPermission {
  EDIT_SHOUT
  EDIT_PRIVACY
  EDIT_MEMBERS
  EDIT_ISSUES
}

model TeamAuditLogKeyValuePair {
  id      String       @id @default(uuid())
  audit   TeamAuditLog @relation(references: [id], fields: [auditId])
  auditId String
  key     String
  value   String
}

model TeamAuditLog {
  id        String                     @id @default(uuid())
  rows      TeamAuditLogKeyValuePair[]
  type      TeamAuditLogType
  content   String
  user      User                       @relation("audited", references: [id], fields: [userId])
  userId    Int
  team      Team?                      @relation("teamAuditLogs", references: [id], fields: [teamId])
  teamId    String?
  createdAt DateTime?                  @default(now())
}

enum TeamAuditLogType {
  UPDATE_TEAM_DETAILS
  UPDATE_PRIVACY_STATUS
  UPDATE_INVITED_USERS
  UPDATE_SHOUT
  REMOVE_USER
}

model AutomodTrigger {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  content   String
  user      User     @relation("automodTriggers", fields: [userId], references: [id])
  userId    Int
  reference String
  matched   String[]
}

model FastFlag {
  id          String            @id @default(uuid())
  createdAt   DateTime          @default(now())
  name        String
  value       String
  valueType   FastFlagUnionType
  description String
}

enum FastFlagUnionType {
  STRING
  NUMBER
  BOOLEAN
  ARRAY
  OBJECT
}
